[2025-05-29 19:24:01,723][nnsvs][INFO] - model:
  stream_sizes:
  - 60
  - 1
  - 1
  - 5
  has_dynamic_features:
  - false
  - false
  - false
  - false
  num_windows: 1
  stream_weights: null
  netG:
    _target_: nnsvs.acoustic_models.NPSSMDNMultistreamParametricModel
    in_dim: 72
    out_dim: 67
    stream_sizes:
    - 60
    - 1
    - 1
    - 5
    reduction_factor: 4
    in_rest_idx: 0
    in_lf0_idx: 62
    out_lf0_idx: 60
    in_lf0_min: null
    in_lf0_max: null
    out_lf0_mean: null
    out_lf0_scale: null
    vuv_model_bap_conditioning: false
    vuv_model_bap0_conditioning: false
    vuv_model_lf0_conditioning: true
    vuv_model_mgc_conditioning: true
    lf0_model:
      _target_: nnsvs.acoustic_models.BiLSTMResF0NonAttentiveDecoder
      in_dim: 72
      out_dim: 1
      in_ph_start_idx: 1
      in_ph_end_idx: 62
      embed_dim: 256
      ff_hidden_dim: 256
      conv_hidden_dim: 128
      lstm_hidden_dim: 64
      num_lstm_layers: 2
      decoder_layers: 1
      decoder_hidden_dim: 256
      prenet_layers: 0
      prenet_hidden_dim: 16
      prenet_dropout: 0.5
      scaled_tanh: true
      zoneout: 0.0
      reduction_factor: 4
      downsample_by_conv: true
      in_lf0_idx: 62
      out_lf0_idx: 0
      in_lf0_min: null
      in_lf0_max: null
      out_lf0_mean: null
      out_lf0_scale: null
    mgc_model:
      _target_: nnsvs.diffsinger.GaussianDiffusion
      in_dim: 73
      out_dim: 60
      encoder:
        _target_: nnsvs.model.FFConvLSTM
        in_dim: 73
        in_ph_start_idx: 1
        in_ph_end_idx: 62
        embed_dim: 256
        ff_hidden_dim: 512
        conv_hidden_dim: 256
        lstm_hidden_dim: 128
        num_lstm_layers: 2
        bidirectional: true
        dropout: 0.0
        out_dim: 256
      K_step: 100
      betas: null
      schedule_type: linear
      scheduler_params:
        max_beta: 0.06
      denoise_fn:
        _target_: nnsvs.diffsinger.DiffNet
        in_dim: 60
        encoder_hidden_dim: 256
        residual_layers: 20
        residual_channels: 256
        dilation_cycle_length: 4
    bap_model:
      _target_: nnsvs.diffsinger.GaussianDiffusion
      in_dim: 73
      out_dim: 5
      norm_scale: 10
      encoder:
        _target_: nnsvs.model.FFConvLSTM
        in_dim: 73
        in_ph_start_idx: 1
        in_ph_end_idx: 62
        embed_dim: 256
        ff_hidden_dim: 256
        conv_hidden_dim: 128
        lstm_hidden_dim: 64
        num_lstm_layers: 2
        bidirectional: true
        dropout: 0.0
        out_dim: 128
      K_step: 100
      betas: null
      schedule_type: linear
      scheduler_params:
        max_beta: 0.06
      denoise_fn:
        _target_: nnsvs.diffsinger.DiffNet
        in_dim: 5
        encoder_hidden_dim: 128
        residual_layers: 10
        residual_channels: 128
        dilation_cycle_length: 4
    vuv_model:
      _target_: nnsvs.model.FFConvLSTM
      in_dim: 133
      in_ph_start_idx: 1
      in_ph_end_idx: 62
      embed_dim: 256
      ff_hidden_dim: 256
      conv_hidden_dim: 128
      lstm_hidden_dim: 64
      num_lstm_layers: 2
      bidirectional: true
      out_dim: 1
      dropout: 0.1
      init_type: kaiming_normal
train:
  out_dir: exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap
  log_dir: tensorboard/opencpop_acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap
  use_amp: true
  use_ddp: false
  pretrained_vocoder_checkpoint: ''
  max_train_steps: -1
  nepochs: 300
  checkpoint_epoch_interval: 50
  feats_criterion: l1
  pitch_reg_weight: 0.0
  pitch_reg_decay_size: 60
  max_num_eval_utts: 5
  stream_wise_loss: false
  use_detect_anomaly: false
  optim:
    optimizer:
      name: AdamW
      params:
        lr: 0.001
        betas:
        - 0.9
        - 0.98
        weight_decay: 0.0
    lr_scheduler:
      name: StepLR
      params:
        step_size: 100
        gamma: 0.5
    clip_norm: 10.0
  resume:
    checkpoint: ''
    load_optimizer: false
  cudnn:
    benchmark: false
    deterministic: true
data:
  train_no_dev:
    in_dir: dump/opencpop/norm/train_no_dev/in_acoustic/
    out_dir: dump/opencpop/norm/train_no_dev/out_acoustic/
  dev:
    in_dir: dump/opencpop/norm/dev/in_acoustic/
    out_dir: dump/opencpop/norm/dev/out_acoustic/
  num_workers: 8
  batch_size: 0
  pin_memory: true
  batch_max_frames: 40000
  allow_cache: true
  sample_rate: 48000
  filter_long_segments: true
  filter_num_frames: 6000
  filter_min_num_frames: 0
  max_time_frames: -1
  in_scaler_path: dump/opencpop/norm/in_acoustic_scaler.joblib
  out_scaler_path: dump/opencpop/norm/out_acoustic_scaler.joblib
  in_lf0_idx: 62
  in_rest_idx: 0
  out_lf0_idx: 60
  use_world_codec: true
mlflow:
  enabled: false
  experiment: test
verbose: 100
seed: 773
data_parallel: false

[2025-05-29 19:24:01,724][nnsvs][INFO] - PyTorch version: 2.7.0+cu126
[2025-05-29 19:24:01,724][nnsvs][INFO] - cudnn.deterministic: True
[2025-05-29 19:24:01,724][nnsvs][INFO] - cudnn.benchmark: False
[2025-05-29 19:24:01,724][nnsvs][INFO] - cuDNN version: 90501
[2025-05-29 19:24:01,724][nnsvs][INFO] - Random seed: 773
[2025-05-29 19:24:01,725][nnsvs][INFO] - Use mixed precision training
[2025-05-29 19:24:01,955][nnsvs][INFO] - NPSSMDNMultistreamParametricModel(
  (lf0_model): BiLSTMResF0NonAttentiveDecoder(
    (emb): Embedding(61, 256)
    (fc_in): Linear(in_features=11, out_features=256, bias=True)
    (ff): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): ReLU()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): ReLU()
    )
    (conv): Sequential(
      (0): ReflectionPad1d((3, 3))
      (1): Conv1d(257, 128, kernel_size=(7,), stride=(1,))
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU()
      (4): ReflectionPad1d((3, 3))
      (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (7): ReLU()
      (8): ReflectionPad1d((3, 3))
      (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU()
    )
    (lstm): LSTM(128, 64, num_layers=2, batch_first=True, bidirectional=True)
    (decoder): ResF0NonAttentiveDecoder(
      (lstm): ModuleList(
        (0): ZoneOutCell(
          (cell): LSTMCell(130, 256)
        )
      )
      (feat_out): Linear(in_features=385, out_features=4, bias=False)
      (conv_downsample): Conv1d(129, 129, kernel_size=(4,), stride=(4,), groups=129)
    )
  )
  (mgc_model): GaussianDiffusion(
    (denoise_fn): DiffNet(
      (input_projection): Conv1d(60, 256, kernel_size=(1,), stride=(1,))
      (diffusion_embedding): SinusoidalPosEmb()
      (mlp): Sequential(
        (0): Linear(in_features=256, out_features=1024, bias=True)
        (1): Mish()
        (2): Linear(in_features=1024, out_features=256, bias=True)
      )
      (residual_layers): ModuleList(
        (0): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (1): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (2): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (3): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (4): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (5): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (6): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (7): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (8): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (9): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (10): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (11): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (12): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (13): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (14): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (15): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (16): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (17): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (18): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (19): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
      )
      (skip_projection): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      (output_projection): Conv1d(256, 60, kernel_size=(1,), stride=(1,))
    )
    (encoder): FFConvLSTM(
      (emb): Embedding(61, 256)
      (fc_in): Linear(in_features=12, out_features=256, bias=True)
      (ff): Sequential(
        (0): Linear(in_features=256, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=512, bias=True)
        (5): ReLU()
      )
      (conv): Sequential(
        (0): ReflectionPad1d((3, 3))
        (1): Conv1d(512, 256, kernel_size=(7,), stride=(1,))
        (2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): ReflectionPad1d((3, 3))
        (5): Conv1d(256, 256, kernel_size=(7,), stride=(1,))
        (6): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU()
        (8): ReflectionPad1d((3, 3))
        (9): Conv1d(256, 256, kernel_size=(7,), stride=(1,))
        (10): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (11): ReLU()
      )
      (lstm): LSTM(256, 128, num_layers=2, batch_first=True, bidirectional=True)
      (fc): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (bap_model): GaussianDiffusion(
    (denoise_fn): DiffNet(
      (input_projection): Conv1d(5, 128, kernel_size=(1,), stride=(1,))
      (diffusion_embedding): SinusoidalPosEmb()
      (mlp): Sequential(
        (0): Linear(in_features=128, out_features=512, bias=True)
        (1): Mish()
        (2): Linear(in_features=512, out_features=128, bias=True)
      )
      (residual_layers): ModuleList(
        (0): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (1): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (2): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (3): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (4): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (5): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (6): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (7): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (8): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (9): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
      )
      (skip_projection): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (output_projection): Conv1d(128, 5, kernel_size=(1,), stride=(1,))
    )
    (encoder): FFConvLSTM(
      (emb): Embedding(61, 256)
      (fc_in): Linear(in_features=12, out_features=256, bias=True)
      (ff): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=256, bias=True)
        (5): ReLU()
      )
      (conv): Sequential(
        (0): ReflectionPad1d((3, 3))
        (1): Conv1d(256, 128, kernel_size=(7,), stride=(1,))
        (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): ReflectionPad1d((3, 3))
        (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
        (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU()
        (8): ReflectionPad1d((3, 3))
        (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
        (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (11): ReLU()
      )
      (lstm): LSTM(128, 64, num_layers=2, batch_first=True, bidirectional=True)
      (fc): Linear(in_features=128, out_features=128, bias=True)
    )
  )
  (vuv_model): FFConvLSTM(
    (emb): Embedding(61, 256)
    (fc_in): Linear(in_features=72, out_features=256, bias=True)
    (ff): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): ReLU()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): ReLU()
    )
    (conv): Sequential(
      (0): ReflectionPad1d((3, 3))
      (1): Conv1d(256, 128, kernel_size=(7,), stride=(1,))
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU()
      (4): ReflectionPad1d((3, 3))
      (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (7): ReLU()
      (8): ReflectionPad1d((3, 3))
      (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU()
    )
    (lstm): LSTM(128, 64, num_layers=2, batch_first=True, dropout=0.1, bidirectional=True)
    (fc): Linear(in_features=128, out_features=1, bias=True)
  )
)
[2025-05-29 19:24:01,958][nnsvs][INFO] - Number of trainable params: 23.463 million
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] Size of dataset: 3550
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] maximum length: 1599
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] minimum length: 368
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] mean length: 1004.8208450704225
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] std length: 285.72123815299454
[2025-05-29 19:24:02,722][nnsvs][DEBUG] - [before] median length: 981.0
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] Size of dataset: 3550
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] maximum length: 1599
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] minimum length: 368
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] mean length: 1004.8208450704225
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] std length: 285.72123815299454
[2025-05-29 19:24:02,861][nnsvs][DEBUG] - [after] median length: 981.0
[2025-05-29 19:24:03,136][nnsvs][DEBUG] - Dynamic batch size with batch_max_frames=40000
[2025-05-29 19:24:03,152][nnsvs][INFO] - Num mini-batches: 92
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 78, Lens: [368, 383, 404, 405, 405, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 421, 422, 424, 424, 424, 426, 427, 427, 427, 429, 430, 432, 433, 434, 439, 440, 447, 448, 448, 451, 453, 453, 454, 456, 458, 462, 466, 469, 469, 473, 473, 475, 475, 475, 478, 481, 482, 484, 485, 485, 486, 486, 487, 488, 491, 491, 492, 492, 492, 493, 494, 499, 500, 501, 502, 506, 506, 506, 507, 507, 508]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 71, Lens: [509, 510, 511, 511, 513, 514, 518, 518, 518, 519, 519, 520, 522, 523, 524, 525, 527, 528, 528, 528, 528, 529, 531, 531, 532, 532, 533, 534, 534, 534, 534, 535, 535, 536, 536, 537, 537, 537, 539, 539, 539, 541, 542, 544, 545, 545, 546, 547, 548, 548, 548, 549, 550, 551, 552, 552, 553, 555, 555, 556, 557, 559, 560, 560, 561, 561, 562, 562, 562, 563, 563]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 66, Lens: [563, 566, 566, 566, 566, 566, 567, 567, 567, 567, 567, 568, 568, 568, 571, 571, 572, 573, 573, 574, 574, 576, 576, 577, 577, 578, 578, 578, 579, 580, 581, 583, 584, 584, 585, 585, 586, 586, 588, 588, 588, 589, 589, 590, 591, 592, 593, 593, 593, 593, 593, 594, 594, 594, 595, 595, 596, 596, 597, 598, 599, 599, 599, 600, 600, 601]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 64, Lens: [601, 601, 602, 602, 602, 602, 602, 602, 603, 603, 604, 604, 605, 605, 606, 606, 606, 606, 607, 608, 608, 609, 609, 610, 610, 610, 610, 611, 611, 611, 611, 611, 612, 612, 613, 614, 614, 614, 614, 614, 614, 615, 615, 615, 616, 616, 616, 616, 617, 617, 618, 618, 619, 619, 619, 619, 619, 619, 620, 621, 622, 623, 623, 624]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 62, Lens: [624, 624, 624, 625, 625, 625, 626, 626, 626, 626, 627, 627, 627, 628, 628, 628, 629, 629, 629, 630, 630, 630, 631, 631, 631, 632, 632, 632, 634, 634, 634, 634, 635, 636, 636, 636, 637, 637, 637, 638, 638, 638, 638, 638, 638, 639, 639, 640, 640, 640, 641, 641, 641, 641, 641, 642, 642, 642, 642, 643, 643, 644]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 59, Lens: [644, 646, 646, 646, 647, 647, 647, 648, 648, 648, 648, 648, 648, 649, 649, 649, 651, 651, 651, 651, 651, 652, 653, 653, 653, 654, 655, 655, 655, 655, 656, 656, 656, 658, 658, 659, 660, 660, 660, 660, 661, 661, 662, 662, 663, 663, 664, 665, 665, 665, 666, 666, 666, 666, 667, 667, 667, 667, 668]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 58, Lens: [668, 668, 669, 669, 670, 670, 670, 670, 670, 670, 670, 671, 671, 671, 671, 671, 672, 673, 673, 673, 673, 675, 675, 676, 676, 676, 676, 677, 677, 677, 677, 677, 678, 678, 678, 679, 679, 679, 679, 679, 679, 679, 680, 680, 680, 680, 680, 680, 681, 681, 681, 682, 682, 682, 682, 682, 682, 682]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 57, Lens: [682, 683, 683, 683, 684, 684, 684, 684, 685, 685, 685, 685, 686, 686, 686, 686, 687, 687, 687, 687, 687, 688, 688, 688, 688, 688, 688, 689, 689, 689, 689, 689, 690, 690, 691, 691, 691, 691, 691, 692, 692, 692, 693, 693, 693, 693, 693, 693, 693, 694, 694, 695, 696, 696, 696, 696, 696]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 56, Lens: [696, 696, 696, 696, 697, 697, 697, 697, 697, 698, 698, 698, 698, 698, 698, 698, 698, 698, 699, 699, 699, 700, 700, 700, 700, 701, 701, 701, 702, 702, 702, 702, 702, 702, 702, 703, 703, 703, 703, 703, 703, 703, 703, 703, 704, 704, 705, 705, 705, 705, 705, 705, 705, 705, 706, 706]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 55, Lens: [706, 706, 706, 706, 706, 706, 707, 707, 707, 707, 707, 708, 708, 708, 708, 708, 709, 709, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 711, 711, 711, 711, 712, 712, 712, 712, 713, 713, 713, 713, 713, 713, 713, 713, 714, 714, 714, 714, 714, 714, 715, 715, 715, 716, 716]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 54, Lens: [717, 717, 717, 718, 718, 718, 718, 718, 718, 719, 719, 719, 720, 720, 720, 720, 721, 721, 721, 721, 721, 721, 722, 722, 722, 722, 722, 723, 723, 723, 724, 724, 724, 724, 724, 725, 725, 725, 725, 726, 726, 726, 726, 726, 726, 726, 726, 727, 727, 727, 727, 727, 727, 728]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 54, Lens: [728, 728, 728, 728, 729, 729, 729, 729, 730, 730, 730, 730, 731, 731, 731, 731, 731, 731, 731, 732, 732, 733, 734, 734, 734, 735, 735, 735, 735, 735, 735, 735, 735, 736, 736, 736, 736, 736, 736, 736, 736, 736, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 53, Lens: [737, 737, 738, 738, 739, 739, 739, 739, 739, 740, 740, 740, 740, 740, 740, 740, 741, 741, 741, 741, 741, 741, 742, 742, 742, 742, 742, 742, 742, 743, 743, 743, 743, 743, 743, 743, 744, 744, 744, 744, 744, 744, 744, 744, 745, 745, 745, 745, 745, 745, 745, 745, 745]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 52, Lens: [746, 746, 746, 746, 746, 746, 746, 747, 747, 747, 747, 747, 747, 747, 747, 748, 748, 748, 748, 748, 748, 748, 749, 750, 750, 750, 750, 751, 751, 751, 752, 752, 752, 752, 753, 753, 753, 753, 753, 753, 753, 753, 754, 754, 754, 754, 754, 754, 755, 755, 755, 755]
[2025-05-29 19:24:03,153][nnsvs][DEBUG] - Batch-size: 52, Lens: [755, 755, 756, 756, 756, 756, 756, 756, 757, 757, 757, 757, 757, 757, 758, 758, 758, 758, 758, 758, 759, 759, 759, 759, 759, 760, 760, 760, 760, 760, 760, 760, 761, 761, 761, 761, 761, 762, 762, 763, 763, 763, 763, 763, 764, 765, 765, 766, 766, 766, 767, 767]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 51, Lens: [767, 767, 768, 768, 768, 768, 769, 769, 769, 769, 769, 770, 770, 770, 770, 770, 770, 770, 770, 770, 771, 771, 771, 771, 771, 771, 772, 772, 772, 772, 772, 773, 774, 774, 774, 774, 775, 775, 775, 775, 775, 776, 777, 777, 777, 778, 778, 778, 779, 779, 779]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 50, Lens: [779, 780, 780, 780, 780, 780, 780, 781, 781, 781, 781, 782, 782, 782, 782, 783, 783, 783, 783, 783, 783, 784, 784, 784, 785, 785, 786, 786, 787, 787, 787, 787, 787, 788, 788, 788, 788, 788, 789, 789, 789, 789, 789, 789, 789, 789, 790, 790, 790, 790]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 50, Lens: [791, 791, 791, 791, 792, 792, 792, 792, 792, 792, 792, 793, 793, 793, 793, 793, 793, 793, 793, 794, 794, 794, 795, 795, 795, 795, 795, 796, 796, 796, 796, 796, 796, 796, 796, 796, 797, 797, 797, 797, 797, 797, 797, 797, 797, 797, 798, 798, 798, 798]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 49, Lens: [798, 798, 798, 798, 798, 799, 799, 799, 799, 799, 800, 800, 800, 800, 800, 800, 800, 801, 801, 801, 801, 802, 802, 802, 802, 802, 803, 803, 803, 803, 803, 803, 803, 804, 804, 805, 805, 805, 805, 805, 805, 805, 805, 806, 806, 806, 806, 806, 806]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 48, Lens: [807, 807, 807, 807, 807, 808, 808, 808, 808, 808, 808, 809, 809, 810, 810, 810, 810, 810, 810, 811, 811, 811, 811, 811, 812, 812, 812, 813, 813, 813, 813, 814, 814, 814, 814, 814, 815, 815, 815, 815, 815, 815, 815, 815, 816, 816, 816, 816]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 48, Lens: [817, 817, 817, 817, 818, 818, 818, 818, 818, 819, 819, 819, 819, 819, 820, 820, 820, 820, 820, 821, 821, 821, 821, 821, 821, 821, 822, 822, 823, 823, 823, 823, 823, 823, 823, 823, 824, 824, 824, 824, 824, 825, 825, 826, 826, 826, 826, 826]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 47, Lens: [826, 827, 827, 827, 827, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 829, 829, 829, 829, 829, 830, 830, 830, 830, 831, 831, 831, 831, 831, 831, 831, 831, 831, 832, 832, 833, 833, 833, 834, 834, 834, 834, 834, 834, 834, 835, 835]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 47, Lens: [836, 836, 836, 836, 836, 836, 836, 836, 836, 837, 837, 837, 837, 837, 837, 838, 838, 838, 839, 839, 839, 839, 839, 839, 839, 839, 840, 840, 840, 840, 840, 840, 840, 841, 841, 841, 841, 841, 842, 842, 842, 842, 842, 842, 842, 843, 843]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 46, Lens: [843, 843, 843, 843, 843, 844, 844, 844, 844, 844, 845, 845, 845, 845, 845, 845, 846, 846, 846, 846, 846, 847, 847, 848, 848, 848, 848, 849, 849, 849, 849, 849, 850, 850, 851, 851, 851, 851, 852, 852, 852, 853, 854, 854, 854, 854]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 46, Lens: [854, 855, 855, 855, 855, 856, 856, 856, 856, 857, 857, 857, 857, 857, 857, 859, 859, 859, 860, 861, 861, 861, 861, 861, 862, 863, 863, 863, 864, 864, 864, 864, 865, 866, 866, 867, 867, 867, 867, 868, 868, 868, 868, 868, 868, 868]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 45, Lens: [868, 869, 869, 869, 869, 869, 869, 870, 870, 870, 871, 871, 872, 872, 873, 873, 874, 874, 874, 874, 874, 875, 875, 875, 876, 876, 876, 876, 877, 877, 877, 877, 877, 877, 877, 877, 878, 878, 879, 879, 879, 880, 880, 880, 880]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 44, Lens: [880, 880, 881, 881, 881, 882, 883, 883, 883, 883, 883, 884, 884, 884, 884, 884, 884, 884, 884, 884, 885, 885, 885, 885, 885, 885, 886, 886, 886, 886, 887, 887, 887, 887, 887, 888, 888, 888, 889, 889, 889, 889, 890, 890]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 44, Lens: [890, 890, 890, 890, 890, 891, 892, 892, 892, 892, 892, 892, 892, 893, 893, 893, 893, 893, 894, 894, 894, 895, 895, 895, 896, 896, 896, 897, 898, 898, 898, 898, 898, 899, 899, 899, 899, 899, 900, 900, 900, 901, 901, 901]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 43, Lens: [902, 902, 902, 903, 903, 903, 904, 905, 905, 905, 905, 905, 905, 905, 906, 906, 906, 907, 907, 907, 908, 908, 909, 909, 909, 910, 910, 911, 911, 911, 912, 912, 912, 913, 913, 914, 914, 914, 914, 915, 915, 915, 916]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 43, Lens: [916, 916, 916, 917, 917, 917, 917, 918, 918, 919, 919, 919, 920, 920, 920, 920, 920, 922, 923, 923, 923, 923, 923, 924, 925, 925, 925, 925, 925, 926, 926, 927, 927, 928, 928, 928, 928, 929, 929, 929, 930, 930, 930]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 42, Lens: [931, 931, 931, 931, 932, 932, 932, 932, 932, 933, 933, 933, 933, 934, 935, 935, 935, 935, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 937, 937, 937, 937, 937, 938, 938, 939, 939, 940, 940, 940, 940, 941]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 41, Lens: [941, 941, 941, 941, 942, 942, 942, 942, 943, 943, 943, 944, 944, 944, 945, 946, 946, 947, 947, 947, 948, 948, 949, 949, 949, 949, 949, 950, 950, 950, 950, 950, 950, 951, 951, 952, 952, 952, 952, 953, 953]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 41, Lens: [953, 953, 953, 954, 954, 954, 954, 954, 955, 955, 955, 955, 955, 955, 956, 957, 957, 958, 958, 959, 961, 961, 962, 962, 962, 962, 963, 963, 963, 963, 963, 964, 964, 964, 964, 964, 964, 965, 965, 965, 966]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 40, Lens: [966, 967, 967, 967, 967, 968, 968, 968, 968, 968, 968, 969, 969, 969, 969, 969, 969, 971, 971, 971, 971, 971, 971, 971, 971, 972, 972, 972, 972, 973, 973, 973, 974, 974, 974, 975, 975, 975, 976, 976]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 40, Lens: [976, 976, 977, 978, 978, 978, 978, 978, 979, 979, 979, 979, 979, 980, 980, 981, 981, 981, 981, 981, 982, 982, 982, 982, 983, 984, 984, 985, 985, 986, 986, 987, 987, 987, 987, 987, 987, 989, 989, 989]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 39, Lens: [989, 989, 989, 990, 990, 990, 990, 990, 991, 991, 991, 992, 992, 992, 992, 993, 993, 994, 994, 994, 995, 996, 996, 997, 997, 997, 998, 998, 998, 998, 999, 999, 999, 1000, 1001, 1001, 1002, 1002, 1002]
[2025-05-29 19:24:03,154][nnsvs][DEBUG] - Batch-size: 39, Lens: [1002, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1008, 1008, 1009, 1009, 1010, 1010, 1011, 1011, 1011, 1012, 1012, 1012, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 38, Lens: [1016, 1016, 1016, 1017, 1017, 1017, 1017, 1019, 1019, 1021, 1021, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1029, 1029, 1029, 1030, 1031, 1031, 1032, 1032, 1032]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 38, Lens: [1032, 1033, 1034, 1034, 1035, 1035, 1035, 1035, 1036, 1036, 1037, 1037, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 37, Lens: [1044, 1044, 1044, 1044, 1045, 1045, 1045, 1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1049, 1049, 1049, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 37, Lens: [1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061, 1061, 1062, 1062, 1063, 1063, 1063, 1063, 1063, 1063]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 37, Lens: [1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1066, 1066, 1066, 1067, 1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 36, Lens: [1072, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1077, 1077, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1081, 1081, 1081, 1082, 1083]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 36, Lens: [1083, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090, 1091, 1091, 1091, 1092, 1092]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 36, Lens: [1092, 1092, 1093, 1093, 1093, 1094, 1094, 1094, 1095, 1095, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1101, 1101, 1102, 1102]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 35, Lens: [1104, 1104, 1104, 1105, 1105, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1112, 1112]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 35, Lens: [1112, 1113, 1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1116, 1117, 1117, 1117, 1117, 1117, 1118, 1119, 1119, 1119, 1119, 1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121, 1121, 1122, 1122]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 35, Lens: [1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124, 1126, 1126, 1126, 1127, 1127, 1127, 1128, 1129, 1129, 1129, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131, 1131, 1132]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 35, Lens: [1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1138, 1138, 1138, 1139, 1139, 1139, 1139]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 34, Lens: [1139, 1139, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1146, 1146]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 34, Lens: [1146, 1146, 1146, 1147, 1147, 1147, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151, 1151, 1152, 1152, 1152, 1153, 1153, 1153, 1153]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 34, Lens: [1153, 1153, 1153, 1153, 1154, 1154, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1162]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 34, Lens: [1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1167, 1167, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 33, Lens: [1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171, 1172, 1173, 1173, 1173, 1174, 1174, 1174, 1175, 1176, 1176, 1177, 1177, 1177, 1178, 1178, 1178, 1178, 1179, 1179, 1180, 1180, 1180, 1180]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 33, Lens: [1181, 1181, 1181, 1181, 1182, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1186, 1187, 1187, 1187, 1188, 1188, 1188, 1188, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 33, Lens: [1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1193, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201, 1201, 1204, 1204]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 32, Lens: [1204, 1205, 1206, 1206, 1206, 1206, 1206, 1207, 1208, 1208, 1209, 1209, 1210, 1210, 1211, 1211, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1215, 1215, 1216, 1216, 1217, 1218, 1219, 1219, 1219]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 32, Lens: [1220, 1220, 1220, 1220, 1221, 1221, 1222, 1222, 1223, 1223, 1223, 1224, 1224, 1224, 1225, 1225, 1225, 1226, 1227, 1228, 1228, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 32, Lens: [1231, 1232, 1233, 1233, 1234, 1234, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1237, 1237, 1238, 1238, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 1241, 1242, 1243, 1244, 1244]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 31, Lens: [1245, 1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249, 1249, 1250, 1251, 1252, 1252, 1253, 1254, 1254, 1254, 1255]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 31, Lens: [1255, 1256, 1256, 1257, 1257, 1258, 1258, 1259, 1259, 1259, 1260, 1261, 1261, 1261, 1262, 1262, 1263, 1264, 1264, 1264, 1265, 1265, 1266, 1266, 1266, 1267, 1267, 1267, 1268, 1268, 1268]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 31, Lens: [1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270, 1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1273, 1274, 1274, 1275, 1275, 1275, 1275, 1276, 1276]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 31, Lens: [1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1282, 1282, 1283, 1283, 1283, 1284, 1284, 1284, 1284, 1285, 1285, 1285, 1285]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1285, 1286, 1286, 1286, 1286, 1287, 1287, 1287, 1288, 1288, 1288, 1288, 1288, 1288, 1289, 1289, 1289, 1289, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291, 1291, 1291]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1297, 1298, 1298, 1298]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1299, 1299, 1299, 1299, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1304]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1304, 1304, 1305, 1305, 1306, 1307, 1307, 1307, 1308, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310, 1311, 1311, 1312, 1312, 1312, 1313, 1313, 1313, 1313, 1314, 1314, 1314, 1314]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1318, 1318, 1319, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1322]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 30, Lens: [1322, 1322, 1323, 1323, 1324, 1324, 1324, 1325, 1326, 1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329, 1330, 1330]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 29, Lens: [1330, 1330, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1334, 1334, 1334, 1334, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 29, Lens: [1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1341, 1341, 1341, 1342, 1342, 1342, 1343, 1343, 1343, 1344, 1345, 1345, 1345, 1346]
[2025-05-29 19:24:03,155][nnsvs][DEBUG] - Batch-size: 29, Lens: [1346, 1346, 1347, 1347, 1348, 1348, 1348, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353, 1354, 1354]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 29, Lens: [1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1358]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 29, Lens: [1358, 1358, 1358, 1358, 1359, 1359, 1360, 1361, 1361, 1361, 1361, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1367]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 29, Lens: [1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 29, Lens: [1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 28, Lens: [1375, 1375, 1375, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1381, 1381]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 28, Lens: [1382, 1382, 1382, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1388, 1388, 1389]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 28, Lens: [1389, 1389, 1389, 1390, 1390, 1390, 1391, 1391, 1392, 1392, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1396, 1396, 1398, 1398, 1398, 1399, 1400]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 28, Lens: [1402, 1402, 1402, 1403, 1403, 1404, 1405, 1408, 1408, 1408, 1409, 1409, 1409, 1410, 1410, 1411, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1415, 1415, 1416]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 28, Lens: [1416, 1416, 1417, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1422, 1422, 1423, 1424, 1424, 1424, 1425, 1425, 1426, 1426, 1427, 1427, 1427, 1427, 1427]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 27, Lens: [1428, 1429, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1432, 1433, 1434, 1434, 1434, 1435, 1435, 1435, 1436, 1436, 1437, 1440, 1441, 1441, 1441, 1441, 1442]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 27, Lens: [1442, 1442, 1444, 1444, 1444, 1445, 1445, 1446, 1446, 1446, 1447, 1448, 1449, 1449, 1449, 1449, 1450, 1451, 1452, 1452, 1454, 1454, 1455, 1455, 1455, 1455, 1456]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 27, Lens: [1456, 1457, 1457, 1458, 1458, 1458, 1459, 1459, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1462, 1463, 1463, 1463, 1463, 1463, 1466, 1466, 1467, 1467]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 26, Lens: [1467, 1468, 1469, 1470, 1471, 1472, 1474, 1475, 1475, 1476, 1477, 1477, 1478, 1479, 1480, 1480, 1480, 1481, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 26, Lens: [1484, 1485, 1486, 1486, 1487, 1490, 1491, 1491, 1491, 1491, 1492, 1493, 1494, 1494, 1494, 1496, 1496, 1497, 1497, 1498, 1499, 1502, 1503, 1505, 1505, 1506]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 26, Lens: [1506, 1506, 1506, 1507, 1507, 1509, 1509, 1510, 1510, 1511, 1511, 1511, 1511, 1514, 1515, 1515, 1516, 1517, 1518, 1518, 1520, 1520, 1520, 1522, 1522, 1523]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 25, Lens: [1523, 1523, 1523, 1524, 1525, 1525, 1526, 1528, 1528, 1528, 1529, 1530, 1530, 1531, 1531, 1533, 1533, 1533, 1533, 1534, 1535, 1536, 1536, 1537, 1537]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 25, Lens: [1539, 1539, 1540, 1541, 1541, 1541, 1542, 1544, 1547, 1547, 1549, 1550, 1550, 1551, 1552, 1553, 1554, 1554, 1555, 1555, 1556, 1557, 1557, 1558, 1558]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 25, Lens: [1558, 1559, 1560, 1560, 1560, 1561, 1561, 1563, 1563, 1563, 1564, 1567, 1568, 1569, 1569, 1570, 1570, 1571, 1572, 1572, 1573, 1573, 1573, 1574, 1575]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 25, Lens: [1575, 1578, 1578, 1578, 1579, 1581, 1581, 1581, 1583, 1583, 1584, 1584, 1586, 1587, 1587, 1588, 1588, 1588, 1588, 1591, 1591, 1593, 1594, 1594, 1594]
[2025-05-29 19:24:03,156][nnsvs][DEBUG] - Batch-size: 4, Lens: [1596, 1596, 1596, 1599]
[2025-05-29 19:24:03,156][nnsvs][INFO] - Average batch size: 38.58695652173913
[2025-05-29 19:24:03,174][nnsvs][DEBUG] - [before] Size of dataset: 206
[2025-05-29 19:24:03,175][nnsvs][DEBUG] - [before] maximum length: 1565
[2025-05-29 19:24:03,175][nnsvs][DEBUG] - [before] minimum length: 462
[2025-05-29 19:24:03,175][nnsvs][DEBUG] - [before] mean length: 938.8203883495146
[2025-05-29 19:24:03,175][nnsvs][DEBUG] - [before] std length: 231.4956682935647
[2025-05-29 19:24:03,175][nnsvs][DEBUG] - [before] median length: 858.5
[2025-05-29 19:24:03,183][nnsvs][DEBUG] - [after] Size of dataset: 206
[2025-05-29 19:24:03,183][nnsvs][DEBUG] - [after] maximum length: 1565
[2025-05-29 19:24:03,183][nnsvs][DEBUG] - [after] minimum length: 462
[2025-05-29 19:24:03,183][nnsvs][DEBUG] - [after] mean length: 938.8203883495146
[2025-05-29 19:24:03,184][nnsvs][DEBUG] - [after] std length: 231.4956682935647
[2025-05-29 19:24:03,184][nnsvs][DEBUG] - [after] median length: 858.5
[2025-05-29 19:24:03,199][nnsvs][DEBUG] - Dynamic batch size with batch_max_frames=40000
[2025-05-29 19:24:03,212][nnsvs][INFO] - Num mini-batches: 8
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 29, Lens: [818, 808, 815, 848, 812, 830, 656, 1367, 814, 804, 865, 783, 811, 808, 865, 910, 1025, 814, 816, 804, 857, 807, 828, 663, 1370, 812, 804, 861, 774]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 29, Lens: [820, 810, 854, 554, 1060, 1004, 838, 1077, 1113, 1066, 1370, 820, 805, 860, 773, 914, 805, 820, 1264, 861, 728, 1366, 853, 686, 745, 635, 836, 641, 839]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 26, Lens: [1428, 628, 1258, 1021, 865, 739, 1342, 872, 686, 1332, 1461, 1438, 1482, 1245, 1017, 871, 733, 1351, 871, 683, 1374, 1370, 867, 734, 1348, 867]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 25, Lens: [684, 1440, 1134, 1506, 694, 1146, 1084, 1543, 1161, 928, 722, 1162, 843, 624, 1135, 1085, 1122, 1137, 1102, 1126, 1110, 1125, 833, 1119, 1084]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 25, Lens: [1565, 1151, 941, 751, 1120, 840, 556, 1187, 1104, 1121, 1141, 1097, 1405, 1090, 1142, 1032, 1055, 973, 1201, 802, 1291, 736, 917, 992, 644]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 30, Lens: [1300, 1036, 1191, 953, 863, 1020, 1192, 1027, 1006, 831, 910, 1005, 632, 1308, 1031, 1194, 941, 871, 1020, 1211, 1015, 1009, 803, 1024, 1200, 1014, 1000, 854, 715, 763]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 31, Lens: [786, 733, 775, 736, 752, 481, 738, 753, 742, 799, 710, 753, 721, 822, 688, 752, 741, 1288, 754, 747, 756, 462, 753, 746, 735, 814, 709, 745, 734, 810, 693]
[2025-05-29 19:24:03,212][nnsvs][DEBUG] - Batch-size: 11, Lens: [744, 752, 1262, 702, 752, 733, 812, 684, 748, 753, 1236]
[2025-05-29 19:24:03,213][nnsvs][INFO] - Average batch size: 25.75
[2025-05-29 19:24:03,213][nnsvs][INFO] - Number of iterations per epoch: 92
[2025-05-29 19:24:03,213][nnsvs][INFO] - Number of max_train_steps is set based on nepochs: 27600
[2025-05-29 19:24:03,213][nnsvs][INFO] - Number of epochs: 300
[2025-05-29 19:24:03,213][nnsvs][INFO] - Number of iterations: 27600
[2025-05-29 19:24:03,216][nnsvs][INFO] - Checking model configs for residual F0 prediction
[2025-05-29 19:24:03,216][nnsvs][INFO] - in_lf0_idx: 62
[2025-05-29 19:24:03,217][nnsvs][INFO] - in_rest_idx: 0
[2025-05-29 19:24:03,217][nnsvs][INFO] - out_lf0_idx: 60
[2025-05-29 19:24:03,217][nnsvs][INFO] - in_lf0_min: 4.2383823
[2025-05-29 19:24:03,218][nnsvs][INFO] - in_lf0_max: 6.779922
[2025-05-29 19:24:03,218][nnsvs][INFO] - model.out_lf0_mean: 5.760185184083265
[2025-05-29 19:24:03,218][nnsvs][INFO] - model.out_lf0_scale: 0.2545281250822128
[2025-05-29 19:26:03,504][nnsvs][INFO] - [train_no_dev] [Epoch 1]: loss 0.598034078984157
[2025-05-29 19:26:44,854][nnsvs][INFO] - model:
  stream_sizes:
  - 60
  - 1
  - 1
  - 5
  has_dynamic_features:
  - false
  - false
  - false
  - false
  num_windows: 1
  stream_weights: null
  netG:
    _target_: nnsvs.acoustic_models.NPSSMDNMultistreamParametricModel
    in_dim: 72
    out_dim: 67
    stream_sizes:
    - 60
    - 1
    - 1
    - 5
    reduction_factor: 4
    in_rest_idx: 0
    in_lf0_idx: 62
    out_lf0_idx: 60
    in_lf0_min: null
    in_lf0_max: null
    out_lf0_mean: null
    out_lf0_scale: null
    vuv_model_bap_conditioning: false
    vuv_model_bap0_conditioning: false
    vuv_model_lf0_conditioning: true
    vuv_model_mgc_conditioning: true
    lf0_model:
      _target_: nnsvs.acoustic_models.BiLSTMResF0NonAttentiveDecoder
      in_dim: 72
      out_dim: 1
      in_ph_start_idx: 1
      in_ph_end_idx: 62
      embed_dim: 256
      ff_hidden_dim: 256
      conv_hidden_dim: 128
      lstm_hidden_dim: 64
      num_lstm_layers: 2
      decoder_layers: 1
      decoder_hidden_dim: 256
      prenet_layers: 0
      prenet_hidden_dim: 16
      prenet_dropout: 0.5
      scaled_tanh: true
      zoneout: 0.0
      reduction_factor: 4
      downsample_by_conv: true
      in_lf0_idx: 62
      out_lf0_idx: 0
      in_lf0_min: null
      in_lf0_max: null
      out_lf0_mean: null
      out_lf0_scale: null
    mgc_model:
      _target_: nnsvs.diffsinger.GaussianDiffusion
      in_dim: 73
      out_dim: 60
      encoder:
        _target_: nnsvs.model.FFConvLSTM
        in_dim: 73
        in_ph_start_idx: 1
        in_ph_end_idx: 62
        embed_dim: 256
        ff_hidden_dim: 512
        conv_hidden_dim: 256
        lstm_hidden_dim: 128
        num_lstm_layers: 2
        bidirectional: true
        dropout: 0.0
        out_dim: 256
      K_step: 100
      betas: null
      schedule_type: linear
      scheduler_params:
        max_beta: 0.06
      denoise_fn:
        _target_: nnsvs.diffsinger.DiffNet
        in_dim: 60
        encoder_hidden_dim: 256
        residual_layers: 20
        residual_channels: 256
        dilation_cycle_length: 4
    bap_model:
      _target_: nnsvs.diffsinger.GaussianDiffusion
      in_dim: 73
      out_dim: 5
      norm_scale: 10
      encoder:
        _target_: nnsvs.model.FFConvLSTM
        in_dim: 73
        in_ph_start_idx: 1
        in_ph_end_idx: 62
        embed_dim: 256
        ff_hidden_dim: 256
        conv_hidden_dim: 128
        lstm_hidden_dim: 64
        num_lstm_layers: 2
        bidirectional: true
        dropout: 0.0
        out_dim: 128
      K_step: 100
      betas: null
      schedule_type: linear
      scheduler_params:
        max_beta: 0.06
      denoise_fn:
        _target_: nnsvs.diffsinger.DiffNet
        in_dim: 5
        encoder_hidden_dim: 128
        residual_layers: 10
        residual_channels: 128
        dilation_cycle_length: 4
    vuv_model:
      _target_: nnsvs.model.FFConvLSTM
      in_dim: 133
      in_ph_start_idx: 1
      in_ph_end_idx: 62
      embed_dim: 256
      ff_hidden_dim: 256
      conv_hidden_dim: 128
      lstm_hidden_dim: 64
      num_lstm_layers: 2
      bidirectional: true
      out_dim: 1
      dropout: 0.1
      init_type: kaiming_normal
train:
  out_dir: exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap
  log_dir: tensorboard/opencpop_acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap
  use_amp: true
  use_ddp: false
  pretrained_vocoder_checkpoint: ''
  max_train_steps: -1
  nepochs: 300
  checkpoint_epoch_interval: 50
  feats_criterion: l1
  pitch_reg_weight: 0.0
  pitch_reg_decay_size: 60
  max_num_eval_utts: 5
  stream_wise_loss: false
  use_detect_anomaly: false
  optim:
    optimizer:
      name: AdamW
      params:
        lr: 0.001
        betas:
        - 0.9
        - 0.98
        weight_decay: 0.0
    lr_scheduler:
      name: StepLR
      params:
        step_size: 100
        gamma: 0.5
    clip_norm: 10.0
  resume:
    checkpoint: ''
    load_optimizer: false
  cudnn:
    benchmark: false
    deterministic: true
data:
  train_no_dev:
    in_dir: dump/opencpop/norm/train_no_dev/in_acoustic/
    out_dir: dump/opencpop/norm/train_no_dev/out_acoustic/
  dev:
    in_dir: dump/opencpop/norm/dev/in_acoustic/
    out_dir: dump/opencpop/norm/dev/out_acoustic/
  num_workers: 8
  batch_size: 0
  pin_memory: true
  batch_max_frames: 40000
  allow_cache: true
  sample_rate: 48000
  filter_long_segments: true
  filter_num_frames: 6000
  filter_min_num_frames: 0
  max_time_frames: -1
  in_scaler_path: dump/opencpop/norm/in_acoustic_scaler.joblib
  out_scaler_path: dump/opencpop/norm/out_acoustic_scaler.joblib
  in_lf0_idx: 62
  in_rest_idx: 0
  out_lf0_idx: 60
  use_world_codec: true
mlflow:
  enabled: false
  experiment: test
verbose: 100
seed: 773
data_parallel: false

[2025-05-29 19:26:44,854][nnsvs][INFO] - PyTorch version: 2.7.0+cu126
[2025-05-29 19:26:44,854][nnsvs][INFO] - cudnn.deterministic: True
[2025-05-29 19:26:44,854][nnsvs][INFO] - cudnn.benchmark: False
[2025-05-29 19:26:44,855][nnsvs][INFO] - cuDNN version: 90501
[2025-05-29 19:26:44,855][nnsvs][INFO] - Random seed: 773
[2025-05-29 19:26:44,855][nnsvs][INFO] - Use mixed precision training
[2025-05-29 19:26:45,085][nnsvs][INFO] - NPSSMDNMultistreamParametricModel(
  (lf0_model): BiLSTMResF0NonAttentiveDecoder(
    (emb): Embedding(61, 256)
    (fc_in): Linear(in_features=11, out_features=256, bias=True)
    (ff): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): ReLU()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): ReLU()
    )
    (conv): Sequential(
      (0): ReflectionPad1d((3, 3))
      (1): Conv1d(257, 128, kernel_size=(7,), stride=(1,))
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU()
      (4): ReflectionPad1d((3, 3))
      (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (7): ReLU()
      (8): ReflectionPad1d((3, 3))
      (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU()
    )
    (lstm): LSTM(128, 64, num_layers=2, batch_first=True, bidirectional=True)
    (decoder): ResF0NonAttentiveDecoder(
      (lstm): ModuleList(
        (0): ZoneOutCell(
          (cell): LSTMCell(130, 256)
        )
      )
      (feat_out): Linear(in_features=385, out_features=4, bias=False)
      (conv_downsample): Conv1d(129, 129, kernel_size=(4,), stride=(4,), groups=129)
    )
  )
  (mgc_model): GaussianDiffusion(
    (denoise_fn): DiffNet(
      (input_projection): Conv1d(60, 256, kernel_size=(1,), stride=(1,))
      (diffusion_embedding): SinusoidalPosEmb()
      (mlp): Sequential(
        (0): Linear(in_features=256, out_features=1024, bias=True)
        (1): Mish()
        (2): Linear(in_features=1024, out_features=256, bias=True)
      )
      (residual_layers): ModuleList(
        (0): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (1): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (2): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (3): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (4): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (5): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (6): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (7): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (8): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (9): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (10): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (11): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (12): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (13): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (14): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (15): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (16): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (17): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (18): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
        (19): ResidualBlock(
          (dilated_conv): Conv1d(256, 512, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=256, out_features=256, bias=True)
          (conditioner_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        )
      )
      (skip_projection): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
      (output_projection): Conv1d(256, 60, kernel_size=(1,), stride=(1,))
    )
    (encoder): FFConvLSTM(
      (emb): Embedding(61, 256)
      (fc_in): Linear(in_features=12, out_features=256, bias=True)
      (ff): Sequential(
        (0): Linear(in_features=256, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=512, bias=True)
        (5): ReLU()
      )
      (conv): Sequential(
        (0): ReflectionPad1d((3, 3))
        (1): Conv1d(512, 256, kernel_size=(7,), stride=(1,))
        (2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): ReflectionPad1d((3, 3))
        (5): Conv1d(256, 256, kernel_size=(7,), stride=(1,))
        (6): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU()
        (8): ReflectionPad1d((3, 3))
        (9): Conv1d(256, 256, kernel_size=(7,), stride=(1,))
        (10): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (11): ReLU()
      )
      (lstm): LSTM(256, 128, num_layers=2, batch_first=True, bidirectional=True)
      (fc): Linear(in_features=256, out_features=256, bias=True)
    )
  )
  (bap_model): GaussianDiffusion(
    (denoise_fn): DiffNet(
      (input_projection): Conv1d(5, 128, kernel_size=(1,), stride=(1,))
      (diffusion_embedding): SinusoidalPosEmb()
      (mlp): Sequential(
        (0): Linear(in_features=128, out_features=512, bias=True)
        (1): Mish()
        (2): Linear(in_features=512, out_features=128, bias=True)
      )
      (residual_layers): ModuleList(
        (0): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (1): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (2): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (3): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (4): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (5): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (6): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (7): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (8): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (9): ResidualBlock(
          (dilated_conv): Conv1d(128, 256, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (diffusion_projection): Linear(in_features=128, out_features=128, bias=True)
          (conditioner_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (output_projection): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
      )
      (skip_projection): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
      (output_projection): Conv1d(128, 5, kernel_size=(1,), stride=(1,))
    )
    (encoder): FFConvLSTM(
      (emb): Embedding(61, 256)
      (fc_in): Linear(in_features=12, out_features=256, bias=True)
      (ff): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=256, bias=True)
        (5): ReLU()
      )
      (conv): Sequential(
        (0): ReflectionPad1d((3, 3))
        (1): Conv1d(256, 128, kernel_size=(7,), stride=(1,))
        (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): ReflectionPad1d((3, 3))
        (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
        (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU()
        (8): ReflectionPad1d((3, 3))
        (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
        (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (11): ReLU()
      )
      (lstm): LSTM(128, 64, num_layers=2, batch_first=True, bidirectional=True)
      (fc): Linear(in_features=128, out_features=128, bias=True)
    )
  )
  (vuv_model): FFConvLSTM(
    (emb): Embedding(61, 256)
    (fc_in): Linear(in_features=72, out_features=256, bias=True)
    (ff): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): ReLU()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): ReLU()
    )
    (conv): Sequential(
      (0): ReflectionPad1d((3, 3))
      (1): Conv1d(256, 128, kernel_size=(7,), stride=(1,))
      (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU()
      (4): ReflectionPad1d((3, 3))
      (5): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (7): ReLU()
      (8): ReflectionPad1d((3, 3))
      (9): Conv1d(128, 128, kernel_size=(7,), stride=(1,))
      (10): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU()
    )
    (lstm): LSTM(128, 64, num_layers=2, batch_first=True, dropout=0.1, bidirectional=True)
    (fc): Linear(in_features=128, out_features=1, bias=True)
  )
)
[2025-05-29 19:26:45,088][nnsvs][INFO] - Number of trainable params: 23.463 million
[2025-05-29 19:26:45,755][nnsvs][DEBUG] - [before] Size of dataset: 3550
[2025-05-29 19:26:45,755][nnsvs][DEBUG] - [before] maximum length: 1599
[2025-05-29 19:26:45,755][nnsvs][DEBUG] - [before] minimum length: 368
[2025-05-29 19:26:45,755][nnsvs][DEBUG] - [before] mean length: 1004.8208450704225
[2025-05-29 19:26:45,755][nnsvs][DEBUG] - [before] std length: 285.72123815299454
[2025-05-29 19:26:45,756][nnsvs][DEBUG] - [before] median length: 981.0
[2025-05-29 19:26:45,894][nnsvs][DEBUG] - [after] Size of dataset: 3550
[2025-05-29 19:26:45,894][nnsvs][DEBUG] - [after] maximum length: 1599
[2025-05-29 19:26:45,894][nnsvs][DEBUG] - [after] minimum length: 368
[2025-05-29 19:26:45,895][nnsvs][DEBUG] - [after] mean length: 1004.8208450704225
[2025-05-29 19:26:45,895][nnsvs][DEBUG] - [after] std length: 285.72123815299454
[2025-05-29 19:26:45,895][nnsvs][DEBUG] - [after] median length: 981.0
[2025-05-29 19:26:46,159][nnsvs][DEBUG] - Dynamic batch size with batch_max_frames=40000
[2025-05-29 19:26:46,176][nnsvs][INFO] - Num mini-batches: 92
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 78, Lens: [368, 383, 404, 405, 405, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 421, 422, 424, 424, 424, 426, 427, 427, 427, 429, 430, 432, 433, 434, 439, 440, 447, 448, 448, 451, 453, 453, 454, 456, 458, 462, 466, 469, 469, 473, 473, 475, 475, 475, 478, 481, 482, 484, 485, 485, 486, 486, 487, 488, 491, 491, 492, 492, 492, 493, 494, 499, 500, 501, 502, 506, 506, 506, 507, 507, 508]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 71, Lens: [509, 510, 511, 511, 513, 514, 518, 518, 518, 519, 519, 520, 522, 523, 524, 525, 527, 528, 528, 528, 528, 529, 531, 531, 532, 532, 533, 534, 534, 534, 534, 535, 535, 536, 536, 537, 537, 537, 539, 539, 539, 541, 542, 544, 545, 545, 546, 547, 548, 548, 548, 549, 550, 551, 552, 552, 553, 555, 555, 556, 557, 559, 560, 560, 561, 561, 562, 562, 562, 563, 563]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 66, Lens: [563, 566, 566, 566, 566, 566, 567, 567, 567, 567, 567, 568, 568, 568, 571, 571, 572, 573, 573, 574, 574, 576, 576, 577, 577, 578, 578, 578, 579, 580, 581, 583, 584, 584, 585, 585, 586, 586, 588, 588, 588, 589, 589, 590, 591, 592, 593, 593, 593, 593, 593, 594, 594, 594, 595, 595, 596, 596, 597, 598, 599, 599, 599, 600, 600, 601]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 64, Lens: [601, 601, 602, 602, 602, 602, 602, 602, 603, 603, 604, 604, 605, 605, 606, 606, 606, 606, 607, 608, 608, 609, 609, 610, 610, 610, 610, 611, 611, 611, 611, 611, 612, 612, 613, 614, 614, 614, 614, 614, 614, 615, 615, 615, 616, 616, 616, 616, 617, 617, 618, 618, 619, 619, 619, 619, 619, 619, 620, 621, 622, 623, 623, 624]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 62, Lens: [624, 624, 624, 625, 625, 625, 626, 626, 626, 626, 627, 627, 627, 628, 628, 628, 629, 629, 629, 630, 630, 630, 631, 631, 631, 632, 632, 632, 634, 634, 634, 634, 635, 636, 636, 636, 637, 637, 637, 638, 638, 638, 638, 638, 638, 639, 639, 640, 640, 640, 641, 641, 641, 641, 641, 642, 642, 642, 642, 643, 643, 644]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 59, Lens: [644, 646, 646, 646, 647, 647, 647, 648, 648, 648, 648, 648, 648, 649, 649, 649, 651, 651, 651, 651, 651, 652, 653, 653, 653, 654, 655, 655, 655, 655, 656, 656, 656, 658, 658, 659, 660, 660, 660, 660, 661, 661, 662, 662, 663, 663, 664, 665, 665, 665, 666, 666, 666, 666, 667, 667, 667, 667, 668]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 58, Lens: [668, 668, 669, 669, 670, 670, 670, 670, 670, 670, 670, 671, 671, 671, 671, 671, 672, 673, 673, 673, 673, 675, 675, 676, 676, 676, 676, 677, 677, 677, 677, 677, 678, 678, 678, 679, 679, 679, 679, 679, 679, 679, 680, 680, 680, 680, 680, 680, 681, 681, 681, 682, 682, 682, 682, 682, 682, 682]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 57, Lens: [682, 683, 683, 683, 684, 684, 684, 684, 685, 685, 685, 685, 686, 686, 686, 686, 687, 687, 687, 687, 687, 688, 688, 688, 688, 688, 688, 689, 689, 689, 689, 689, 690, 690, 691, 691, 691, 691, 691, 692, 692, 692, 693, 693, 693, 693, 693, 693, 693, 694, 694, 695, 696, 696, 696, 696, 696]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 56, Lens: [696, 696, 696, 696, 697, 697, 697, 697, 697, 698, 698, 698, 698, 698, 698, 698, 698, 698, 699, 699, 699, 700, 700, 700, 700, 701, 701, 701, 702, 702, 702, 702, 702, 702, 702, 703, 703, 703, 703, 703, 703, 703, 703, 703, 704, 704, 705, 705, 705, 705, 705, 705, 705, 705, 706, 706]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 55, Lens: [706, 706, 706, 706, 706, 706, 707, 707, 707, 707, 707, 708, 708, 708, 708, 708, 709, 709, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 711, 711, 711, 711, 712, 712, 712, 712, 713, 713, 713, 713, 713, 713, 713, 713, 714, 714, 714, 714, 714, 714, 715, 715, 715, 716, 716]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 54, Lens: [717, 717, 717, 718, 718, 718, 718, 718, 718, 719, 719, 719, 720, 720, 720, 720, 721, 721, 721, 721, 721, 721, 722, 722, 722, 722, 722, 723, 723, 723, 724, 724, 724, 724, 724, 725, 725, 725, 725, 726, 726, 726, 726, 726, 726, 726, 726, 727, 727, 727, 727, 727, 727, 728]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 54, Lens: [728, 728, 728, 728, 729, 729, 729, 729, 730, 730, 730, 730, 731, 731, 731, 731, 731, 731, 731, 732, 732, 733, 734, 734, 734, 735, 735, 735, 735, 735, 735, 735, 735, 736, 736, 736, 736, 736, 736, 736, 736, 736, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 53, Lens: [737, 737, 738, 738, 739, 739, 739, 739, 739, 740, 740, 740, 740, 740, 740, 740, 741, 741, 741, 741, 741, 741, 742, 742, 742, 742, 742, 742, 742, 743, 743, 743, 743, 743, 743, 743, 744, 744, 744, 744, 744, 744, 744, 744, 745, 745, 745, 745, 745, 745, 745, 745, 745]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 52, Lens: [746, 746, 746, 746, 746, 746, 746, 747, 747, 747, 747, 747, 747, 747, 747, 748, 748, 748, 748, 748, 748, 748, 749, 750, 750, 750, 750, 751, 751, 751, 752, 752, 752, 752, 753, 753, 753, 753, 753, 753, 753, 753, 754, 754, 754, 754, 754, 754, 755, 755, 755, 755]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 52, Lens: [755, 755, 756, 756, 756, 756, 756, 756, 757, 757, 757, 757, 757, 757, 758, 758, 758, 758, 758, 758, 759, 759, 759, 759, 759, 760, 760, 760, 760, 760, 760, 760, 761, 761, 761, 761, 761, 762, 762, 763, 763, 763, 763, 763, 764, 765, 765, 766, 766, 766, 767, 767]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 51, Lens: [767, 767, 768, 768, 768, 768, 769, 769, 769, 769, 769, 770, 770, 770, 770, 770, 770, 770, 770, 770, 771, 771, 771, 771, 771, 771, 772, 772, 772, 772, 772, 773, 774, 774, 774, 774, 775, 775, 775, 775, 775, 776, 777, 777, 777, 778, 778, 778, 779, 779, 779]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 50, Lens: [779, 780, 780, 780, 780, 780, 780, 781, 781, 781, 781, 782, 782, 782, 782, 783, 783, 783, 783, 783, 783, 784, 784, 784, 785, 785, 786, 786, 787, 787, 787, 787, 787, 788, 788, 788, 788, 788, 789, 789, 789, 789, 789, 789, 789, 789, 790, 790, 790, 790]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 50, Lens: [791, 791, 791, 791, 792, 792, 792, 792, 792, 792, 792, 793, 793, 793, 793, 793, 793, 793, 793, 794, 794, 794, 795, 795, 795, 795, 795, 796, 796, 796, 796, 796, 796, 796, 796, 796, 797, 797, 797, 797, 797, 797, 797, 797, 797, 797, 798, 798, 798, 798]
[2025-05-29 19:26:46,177][nnsvs][DEBUG] - Batch-size: 49, Lens: [798, 798, 798, 798, 798, 799, 799, 799, 799, 799, 800, 800, 800, 800, 800, 800, 800, 801, 801, 801, 801, 802, 802, 802, 802, 802, 803, 803, 803, 803, 803, 803, 803, 804, 804, 805, 805, 805, 805, 805, 805, 805, 805, 806, 806, 806, 806, 806, 806]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 48, Lens: [807, 807, 807, 807, 807, 808, 808, 808, 808, 808, 808, 809, 809, 810, 810, 810, 810, 810, 810, 811, 811, 811, 811, 811, 812, 812, 812, 813, 813, 813, 813, 814, 814, 814, 814, 814, 815, 815, 815, 815, 815, 815, 815, 815, 816, 816, 816, 816]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 48, Lens: [817, 817, 817, 817, 818, 818, 818, 818, 818, 819, 819, 819, 819, 819, 820, 820, 820, 820, 820, 821, 821, 821, 821, 821, 821, 821, 822, 822, 823, 823, 823, 823, 823, 823, 823, 823, 824, 824, 824, 824, 824, 825, 825, 826, 826, 826, 826, 826]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 47, Lens: [826, 827, 827, 827, 827, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 829, 829, 829, 829, 829, 830, 830, 830, 830, 831, 831, 831, 831, 831, 831, 831, 831, 831, 832, 832, 833, 833, 833, 834, 834, 834, 834, 834, 834, 834, 835, 835]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 47, Lens: [836, 836, 836, 836, 836, 836, 836, 836, 836, 837, 837, 837, 837, 837, 837, 838, 838, 838, 839, 839, 839, 839, 839, 839, 839, 839, 840, 840, 840, 840, 840, 840, 840, 841, 841, 841, 841, 841, 842, 842, 842, 842, 842, 842, 842, 843, 843]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 46, Lens: [843, 843, 843, 843, 843, 844, 844, 844, 844, 844, 845, 845, 845, 845, 845, 845, 846, 846, 846, 846, 846, 847, 847, 848, 848, 848, 848, 849, 849, 849, 849, 849, 850, 850, 851, 851, 851, 851, 852, 852, 852, 853, 854, 854, 854, 854]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 46, Lens: [854, 855, 855, 855, 855, 856, 856, 856, 856, 857, 857, 857, 857, 857, 857, 859, 859, 859, 860, 861, 861, 861, 861, 861, 862, 863, 863, 863, 864, 864, 864, 864, 865, 866, 866, 867, 867, 867, 867, 868, 868, 868, 868, 868, 868, 868]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 45, Lens: [868, 869, 869, 869, 869, 869, 869, 870, 870, 870, 871, 871, 872, 872, 873, 873, 874, 874, 874, 874, 874, 875, 875, 875, 876, 876, 876, 876, 877, 877, 877, 877, 877, 877, 877, 877, 878, 878, 879, 879, 879, 880, 880, 880, 880]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 44, Lens: [880, 880, 881, 881, 881, 882, 883, 883, 883, 883, 883, 884, 884, 884, 884, 884, 884, 884, 884, 884, 885, 885, 885, 885, 885, 885, 886, 886, 886, 886, 887, 887, 887, 887, 887, 888, 888, 888, 889, 889, 889, 889, 890, 890]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 44, Lens: [890, 890, 890, 890, 890, 891, 892, 892, 892, 892, 892, 892, 892, 893, 893, 893, 893, 893, 894, 894, 894, 895, 895, 895, 896, 896, 896, 897, 898, 898, 898, 898, 898, 899, 899, 899, 899, 899, 900, 900, 900, 901, 901, 901]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 43, Lens: [902, 902, 902, 903, 903, 903, 904, 905, 905, 905, 905, 905, 905, 905, 906, 906, 906, 907, 907, 907, 908, 908, 909, 909, 909, 910, 910, 911, 911, 911, 912, 912, 912, 913, 913, 914, 914, 914, 914, 915, 915, 915, 916]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 43, Lens: [916, 916, 916, 917, 917, 917, 917, 918, 918, 919, 919, 919, 920, 920, 920, 920, 920, 922, 923, 923, 923, 923, 923, 924, 925, 925, 925, 925, 925, 926, 926, 927, 927, 928, 928, 928, 928, 929, 929, 929, 930, 930, 930]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 42, Lens: [931, 931, 931, 931, 932, 932, 932, 932, 932, 933, 933, 933, 933, 934, 935, 935, 935, 935, 936, 936, 936, 936, 936, 936, 936, 936, 936, 936, 937, 937, 937, 937, 937, 938, 938, 939, 939, 940, 940, 940, 940, 941]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 41, Lens: [941, 941, 941, 941, 942, 942, 942, 942, 943, 943, 943, 944, 944, 944, 945, 946, 946, 947, 947, 947, 948, 948, 949, 949, 949, 949, 949, 950, 950, 950, 950, 950, 950, 951, 951, 952, 952, 952, 952, 953, 953]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 41, Lens: [953, 953, 953, 954, 954, 954, 954, 954, 955, 955, 955, 955, 955, 955, 956, 957, 957, 958, 958, 959, 961, 961, 962, 962, 962, 962, 963, 963, 963, 963, 963, 964, 964, 964, 964, 964, 964, 965, 965, 965, 966]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 40, Lens: [966, 967, 967, 967, 967, 968, 968, 968, 968, 968, 968, 969, 969, 969, 969, 969, 969, 971, 971, 971, 971, 971, 971, 971, 971, 972, 972, 972, 972, 973, 973, 973, 974, 974, 974, 975, 975, 975, 976, 976]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 40, Lens: [976, 976, 977, 978, 978, 978, 978, 978, 979, 979, 979, 979, 979, 980, 980, 981, 981, 981, 981, 981, 982, 982, 982, 982, 983, 984, 984, 985, 985, 986, 986, 987, 987, 987, 987, 987, 987, 989, 989, 989]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 39, Lens: [989, 989, 989, 990, 990, 990, 990, 990, 991, 991, 991, 992, 992, 992, 992, 993, 993, 994, 994, 994, 995, 996, 996, 997, 997, 997, 998, 998, 998, 998, 999, 999, 999, 1000, 1001, 1001, 1002, 1002, 1002]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 39, Lens: [1002, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1006, 1006, 1006, 1006, 1007, 1008, 1008, 1009, 1009, 1010, 1010, 1011, 1011, 1011, 1012, 1012, 1012, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 38, Lens: [1016, 1016, 1016, 1017, 1017, 1017, 1017, 1019, 1019, 1021, 1021, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1029, 1029, 1029, 1030, 1031, 1031, 1032, 1032, 1032]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 38, Lens: [1032, 1033, 1034, 1034, 1035, 1035, 1035, 1035, 1036, 1036, 1037, 1037, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 37, Lens: [1044, 1044, 1044, 1044, 1045, 1045, 1045, 1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1049, 1049, 1049, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 37, Lens: [1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061, 1061, 1062, 1062, 1063, 1063, 1063, 1063, 1063, 1063]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 37, Lens: [1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1066, 1066, 1066, 1067, 1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072]
[2025-05-29 19:26:46,178][nnsvs][DEBUG] - Batch-size: 36, Lens: [1072, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1077, 1077, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1081, 1081, 1081, 1082, 1083]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 36, Lens: [1083, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090, 1091, 1091, 1091, 1092, 1092]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 36, Lens: [1092, 1092, 1093, 1093, 1093, 1094, 1094, 1094, 1095, 1095, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1101, 1101, 1102, 1102]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 35, Lens: [1104, 1104, 1104, 1105, 1105, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1112, 1112]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 35, Lens: [1112, 1113, 1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1116, 1117, 1117, 1117, 1117, 1117, 1118, 1119, 1119, 1119, 1119, 1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121, 1121, 1122, 1122]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 35, Lens: [1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124, 1126, 1126, 1126, 1127, 1127, 1127, 1128, 1129, 1129, 1129, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131, 1131, 1132]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 35, Lens: [1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1138, 1138, 1138, 1139, 1139, 1139, 1139]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 34, Lens: [1139, 1139, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1146, 1146]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 34, Lens: [1146, 1146, 1146, 1147, 1147, 1147, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151, 1151, 1152, 1152, 1152, 1153, 1153, 1153, 1153]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 34, Lens: [1153, 1153, 1153, 1153, 1154, 1154, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1162]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 34, Lens: [1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1167, 1167, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 33, Lens: [1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171, 1172, 1173, 1173, 1173, 1174, 1174, 1174, 1175, 1176, 1176, 1177, 1177, 1177, 1178, 1178, 1178, 1178, 1179, 1179, 1180, 1180, 1180, 1180]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 33, Lens: [1181, 1181, 1181, 1181, 1182, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1186, 1187, 1187, 1187, 1188, 1188, 1188, 1188, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 33, Lens: [1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1193, 1194, 1194, 1194, 1194, 1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201, 1201, 1204, 1204]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 32, Lens: [1204, 1205, 1206, 1206, 1206, 1206, 1206, 1207, 1208, 1208, 1209, 1209, 1210, 1210, 1211, 1211, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1215, 1215, 1216, 1216, 1217, 1218, 1219, 1219, 1219]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 32, Lens: [1220, 1220, 1220, 1220, 1221, 1221, 1222, 1222, 1223, 1223, 1223, 1224, 1224, 1224, 1225, 1225, 1225, 1226, 1227, 1228, 1228, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 32, Lens: [1231, 1232, 1233, 1233, 1234, 1234, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1237, 1237, 1238, 1238, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 1241, 1242, 1243, 1244, 1244]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 31, Lens: [1245, 1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249, 1249, 1250, 1251, 1252, 1252, 1253, 1254, 1254, 1254, 1255]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 31, Lens: [1255, 1256, 1256, 1257, 1257, 1258, 1258, 1259, 1259, 1259, 1260, 1261, 1261, 1261, 1262, 1262, 1263, 1264, 1264, 1264, 1265, 1265, 1266, 1266, 1266, 1267, 1267, 1267, 1268, 1268, 1268]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 31, Lens: [1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270, 1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1273, 1274, 1274, 1275, 1275, 1275, 1275, 1276, 1276]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 31, Lens: [1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1282, 1282, 1283, 1283, 1283, 1284, 1284, 1284, 1284, 1285, 1285, 1285, 1285]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 30, Lens: [1285, 1286, 1286, 1286, 1286, 1287, 1287, 1287, 1288, 1288, 1288, 1288, 1288, 1288, 1289, 1289, 1289, 1289, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291, 1291, 1291]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 30, Lens: [1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1297, 1298, 1298, 1298]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 30, Lens: [1299, 1299, 1299, 1299, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1304]
[2025-05-29 19:26:46,179][nnsvs][DEBUG] - Batch-size: 30, Lens: [1304, 1304, 1305, 1305, 1306, 1307, 1307, 1307, 1308, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310, 1311, 1311, 1312, 1312, 1312, 1313, 1313, 1313, 1313, 1314, 1314, 1314, 1314]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 30, Lens: [1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1318, 1318, 1319, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1322]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 30, Lens: [1322, 1322, 1323, 1323, 1324, 1324, 1324, 1325, 1326, 1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329, 1330, 1330]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1330, 1330, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1334, 1334, 1334, 1334, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1341, 1341, 1341, 1342, 1342, 1342, 1343, 1343, 1343, 1344, 1345, 1345, 1345, 1346]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1346, 1346, 1347, 1347, 1348, 1348, 1348, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353, 1354, 1354]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1358]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1358, 1358, 1358, 1358, 1359, 1359, 1360, 1361, 1361, 1361, 1361, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1367]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 29, Lens: [1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 28, Lens: [1375, 1375, 1375, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1381, 1381]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 28, Lens: [1382, 1382, 1382, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1388, 1388, 1389]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 28, Lens: [1389, 1389, 1389, 1390, 1390, 1390, 1391, 1391, 1392, 1392, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1396, 1396, 1398, 1398, 1398, 1399, 1400]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 28, Lens: [1402, 1402, 1402, 1403, 1403, 1404, 1405, 1408, 1408, 1408, 1409, 1409, 1409, 1410, 1410, 1411, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1415, 1415, 1416]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 28, Lens: [1416, 1416, 1417, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1422, 1422, 1423, 1424, 1424, 1424, 1425, 1425, 1426, 1426, 1427, 1427, 1427, 1427, 1427]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 27, Lens: [1428, 1429, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1432, 1433, 1434, 1434, 1434, 1435, 1435, 1435, 1436, 1436, 1437, 1440, 1441, 1441, 1441, 1441, 1442]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 27, Lens: [1442, 1442, 1444, 1444, 1444, 1445, 1445, 1446, 1446, 1446, 1447, 1448, 1449, 1449, 1449, 1449, 1450, 1451, 1452, 1452, 1454, 1454, 1455, 1455, 1455, 1455, 1456]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 27, Lens: [1456, 1457, 1457, 1458, 1458, 1458, 1459, 1459, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1462, 1463, 1463, 1463, 1463, 1463, 1466, 1466, 1467, 1467]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 26, Lens: [1467, 1468, 1469, 1470, 1471, 1472, 1474, 1475, 1475, 1476, 1477, 1477, 1478, 1479, 1480, 1480, 1480, 1481, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 26, Lens: [1484, 1485, 1486, 1486, 1487, 1490, 1491, 1491, 1491, 1491, 1492, 1493, 1494, 1494, 1494, 1496, 1496, 1497, 1497, 1498, 1499, 1502, 1503, 1505, 1505, 1506]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 26, Lens: [1506, 1506, 1506, 1507, 1507, 1509, 1509, 1510, 1510, 1511, 1511, 1511, 1511, 1514, 1515, 1515, 1516, 1517, 1518, 1518, 1520, 1520, 1520, 1522, 1522, 1523]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 25, Lens: [1523, 1523, 1523, 1524, 1525, 1525, 1526, 1528, 1528, 1528, 1529, 1530, 1530, 1531, 1531, 1533, 1533, 1533, 1533, 1534, 1535, 1536, 1536, 1537, 1537]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 25, Lens: [1539, 1539, 1540, 1541, 1541, 1541, 1542, 1544, 1547, 1547, 1549, 1550, 1550, 1551, 1552, 1553, 1554, 1554, 1555, 1555, 1556, 1557, 1557, 1558, 1558]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 25, Lens: [1558, 1559, 1560, 1560, 1560, 1561, 1561, 1563, 1563, 1563, 1564, 1567, 1568, 1569, 1569, 1570, 1570, 1571, 1572, 1572, 1573, 1573, 1573, 1574, 1575]
[2025-05-29 19:26:46,180][nnsvs][DEBUG] - Batch-size: 25, Lens: [1575, 1578, 1578, 1578, 1579, 1581, 1581, 1581, 1583, 1583, 1584, 1584, 1586, 1587, 1587, 1588, 1588, 1588, 1588, 1591, 1591, 1593, 1594, 1594, 1594]
[2025-05-29 19:26:46,181][nnsvs][DEBUG] - Batch-size: 4, Lens: [1596, 1596, 1596, 1599]
[2025-05-29 19:26:46,181][nnsvs][INFO] - Average batch size: 38.58695652173913
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] Size of dataset: 206
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] maximum length: 1565
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] minimum length: 462
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] mean length: 938.8203883495146
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] std length: 231.4956682935647
[2025-05-29 19:26:46,338][nnsvs][DEBUG] - [before] median length: 858.5
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] Size of dataset: 206
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] maximum length: 1565
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] minimum length: 462
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] mean length: 938.8203883495146
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] std length: 231.4956682935647
[2025-05-29 19:26:46,348][nnsvs][DEBUG] - [after] median length: 858.5
[2025-05-29 19:26:46,366][nnsvs][DEBUG] - Dynamic batch size with batch_max_frames=40000
[2025-05-29 19:26:46,379][nnsvs][INFO] - Num mini-batches: 8
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 29, Lens: [818, 808, 815, 848, 812, 830, 656, 1367, 814, 804, 865, 783, 811, 808, 865, 910, 1025, 814, 816, 804, 857, 807, 828, 663, 1370, 812, 804, 861, 774]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 29, Lens: [820, 810, 854, 554, 1060, 1004, 838, 1077, 1113, 1066, 1370, 820, 805, 860, 773, 914, 805, 820, 1264, 861, 728, 1366, 853, 686, 745, 635, 836, 641, 839]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 26, Lens: [1428, 628, 1258, 1021, 865, 739, 1342, 872, 686, 1332, 1461, 1438, 1482, 1245, 1017, 871, 733, 1351, 871, 683, 1374, 1370, 867, 734, 1348, 867]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 25, Lens: [684, 1440, 1134, 1506, 694, 1146, 1084, 1543, 1161, 928, 722, 1162, 843, 624, 1135, 1085, 1122, 1137, 1102, 1126, 1110, 1125, 833, 1119, 1084]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 25, Lens: [1565, 1151, 941, 751, 1120, 840, 556, 1187, 1104, 1121, 1141, 1097, 1405, 1090, 1142, 1032, 1055, 973, 1201, 802, 1291, 736, 917, 992, 644]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 30, Lens: [1300, 1036, 1191, 953, 863, 1020, 1192, 1027, 1006, 831, 910, 1005, 632, 1308, 1031, 1194, 941, 871, 1020, 1211, 1015, 1009, 803, 1024, 1200, 1014, 1000, 854, 715, 763]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 31, Lens: [786, 733, 775, 736, 752, 481, 738, 753, 742, 799, 710, 753, 721, 822, 688, 752, 741, 1288, 754, 747, 756, 462, 753, 746, 735, 814, 709, 745, 734, 810, 693]
[2025-05-29 19:26:46,380][nnsvs][DEBUG] - Batch-size: 11, Lens: [744, 752, 1262, 702, 752, 733, 812, 684, 748, 753, 1236]
[2025-05-29 19:26:46,380][nnsvs][INFO] - Average batch size: 25.75
[2025-05-29 19:26:46,381][nnsvs][INFO] - Number of iterations per epoch: 92
[2025-05-29 19:26:46,381][nnsvs][INFO] - Number of max_train_steps is set based on nepochs: 27600
[2025-05-29 19:26:46,381][nnsvs][INFO] - Number of epochs: 300
[2025-05-29 19:26:46,381][nnsvs][INFO] - Number of iterations: 27600
[2025-05-29 19:26:46,384][nnsvs][INFO] - Checking model configs for residual F0 prediction
[2025-05-29 19:26:46,385][nnsvs][INFO] - in_lf0_idx: 62
[2025-05-29 19:26:46,385][nnsvs][INFO] - in_rest_idx: 0
[2025-05-29 19:26:46,385][nnsvs][INFO] - out_lf0_idx: 60
[2025-05-29 19:26:46,386][nnsvs][INFO] - in_lf0_min: 4.2383823
[2025-05-29 19:26:46,386][nnsvs][INFO] - in_lf0_max: 6.779922
[2025-05-29 19:26:46,386][nnsvs][INFO] - model.out_lf0_mean: 5.760185184083265
[2025-05-29 19:26:46,386][nnsvs][INFO] - model.out_lf0_scale: 0.2545281250822128
[2025-05-29 19:28:45,503][nnsvs][INFO] - [train_no_dev] [Epoch 1]: loss 0.598034078984157
[2025-05-29 19:29:42,541][nnsvs][INFO] - [dev] [Epoch 1]: loss 0.4307047203183174
[2025-05-29 19:29:42,723][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:31:41,425][nnsvs][INFO] - [train_no_dev] [Epoch 2]: loss 0.3398937493886637
[2025-05-29 19:32:38,384][nnsvs][INFO] - [dev] [Epoch 2]: loss 0.27411971241235733
[2025-05-29 19:32:38,648][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:34:36,481][nnsvs][INFO] - [train_no_dev] [Epoch 3]: loss 0.2401265161840812
[2025-05-29 19:35:33,785][nnsvs][INFO] - [dev] [Epoch 3]: loss 0.212184252217412
[2025-05-29 19:35:34,053][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:37:31,795][nnsvs][INFO] - [train_no_dev] [Epoch 4]: loss 0.19877147042880888
[2025-05-29 19:38:29,285][nnsvs][INFO] - [dev] [Epoch 4]: loss 0.1994588617235422
[2025-05-29 19:38:29,549][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:40:27,595][nnsvs][INFO] - [train_no_dev] [Epoch 5]: loss 0.17896144189264462
[2025-05-29 19:41:25,039][nnsvs][INFO] - [dev] [Epoch 5]: loss 0.16650438867509365
[2025-05-29 19:41:25,294][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:43:23,465][nnsvs][INFO] - [train_no_dev] [Epoch 6]: loss 0.166868826293427
[2025-05-29 19:44:20,748][nnsvs][INFO] - [dev] [Epoch 6]: loss 0.15181861445307732
[2025-05-29 19:44:21,010][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:46:19,026][nnsvs][INFO] - [train_no_dev] [Epoch 7]: loss 0.15469882070370342
[2025-05-29 19:47:16,606][nnsvs][INFO] - [dev] [Epoch 7]: loss 0.1667058765888214
[2025-05-29 19:49:14,809][nnsvs][INFO] - [train_no_dev] [Epoch 8]: loss 0.15052181109786034
[2025-05-29 19:50:12,275][nnsvs][INFO] - [dev] [Epoch 8]: loss 0.1572150606662035
[2025-05-29 19:52:10,370][nnsvs][INFO] - [train_no_dev] [Epoch 9]: loss 0.14809609625650488
[2025-05-29 19:53:07,968][nnsvs][INFO] - [dev] [Epoch 9]: loss 0.1355324611067772
[2025-05-29 19:53:08,225][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
[2025-05-29 19:55:06,420][nnsvs][INFO] - [train_no_dev] [Epoch 10]: loss 0.14289890488852625
[2025-05-29 19:56:04,008][nnsvs][INFO] - [dev] [Epoch 10]: loss 0.14661350287497044
[2025-05-29 19:58:02,431][nnsvs][INFO] - [train_no_dev] [Epoch 11]: loss 0.1377204562658849
[2025-05-29 19:58:59,863][nnsvs][INFO] - [dev] [Epoch 11]: loss 0.14468135125935078
[2025-05-30 12:53:03,122][nnsvs][INFO] - [train_no_dev] [Epoch 12]: loss 0.13641381360914395
[2025-05-30 12:54:01,620][nnsvs][INFO] - [dev] [Epoch 12]: loss 0.14314267225563526
[2025-05-30 12:56:04,385][nnsvs][INFO] - [train_no_dev] [Epoch 13]: loss 0.13461800356921944
[2025-05-30 12:57:02,755][nnsvs][INFO] - [dev] [Epoch 13]: loss 0.13370345439761877
[2025-05-30 12:57:03,018][nnsvs][INFO] - Saved checkpoint at /home/ilias/Documents/nnsvs/recipes/opencpop/dev-48k-world/exp/opencpop/acoustic_nnsvs_world_multi_ar_f0_diff_mgcbap/best_loss.pth
